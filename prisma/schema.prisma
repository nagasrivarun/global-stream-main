// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  hashedPassword      String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  role                String    @default("USER") // USER, ADMIN
  subscriptionStatus  String    @default("FREE") // FREE, ACTIVE, CANCELED
  subscriptionPlanId  String?
  stripeCustomerId    String?
  stripeSubscriptionId String?
  
  accounts            Account[]
  sessions            Session[]
  userContent         UserContent[]
  watchHistory        WatchHistory[]
  subscriptions       Subscription[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Content {
  id              String    @id @default(cuid())
  title           String
  description     String    @db.Text
  type            String    // MOVIE, SHOW, SPORT
  posterUrl       String?
  backdropUrl     String?
  trailerUrl      String?
  releaseYear     Int?
  duration        Int?      // in minutes
  maturityRating  String?
  featured        Boolean   @default(false)
  trending        Boolean   @default(false)
  popular         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  genres          Genre[]
  languages       Language[]
  cast            Cast[]
  crew            Crew[]
  seasons         Season[]  // For TV shows
  userContent     UserContent[]
  watchHistory    WatchHistory[]
  relatedContent  Content[] @relation("RelatedContent")
  relatedTo       Content[] @relation("RelatedContent")
}

model Genre {
  id        String    @id @default(cuid())
  name      String    @unique
  content   Content[]
}

model Language {
  id        String    @id @default(cuid())
  name      String
  code      String    @unique
  content   Content[]
}

model Person {
  id          String    @id @default(cuid())
  name        String
  biography   String?   @db.Text
  imageUrl    String?
  birthDate   DateTime?
  cast        Cast[]
  crew        Crew[]
}

model Cast {
  id          String    @id @default(cuid())
  character   String
  contentId   String
  personId    String
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  person      Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
}

model Crew {
  id          String    @id @default(cuid())
  role        String    // Director, Writer, Producer, etc.
  contentId   String
  personId    String
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  person      Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
}

model Season {
  id          String    @id @default(cuid())
  number      Int
  title       String?
  overview    String?   @db.Text
  posterUrl   String?
  releaseYear Int?
  contentId   String
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  episodes    Episode[]
}

model Episode {
  id          String    @id @default(cuid())
  number      Int
  title       String
  description String?   @db.Text
  duration    Int?      // in minutes
  thumbnailUrl String?
  videoUrl    String?
  releaseDate DateTime?
  seasonId    String
  season      Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
}

model UserContent {
  id          String    @id @default(cuid())
  userId      String
  contentId   String
  addedAt     DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model WatchHistory {
  id          String    @id @default(cuid())
  userId      String
  contentId   String
  progress    Float     // 0.0 to 1.0
  watchedAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model SubscriptionPlan {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  features    String[]
  isPopular   Boolean   @default(false)
  stripePriceId String?
  subscriptions Subscription[]
}

model Subscription {
  id                  String    @id @default(cuid())
  userId              String
  planId              String
  stripeSubscriptionId String?
  status              String    // ACTIVE, INACTIVE, CANCELED
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                SubscriptionPlan @relation(fields: [planId], references: [id])
}
